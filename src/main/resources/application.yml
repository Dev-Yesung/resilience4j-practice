spring:
  application:
    name: real_situation_retrospect

server:
  port: 8080

resilience4j:
  retry:
    instances:
      simpleRetryConfig:
        baseConfig: default
    configs:
      default:
        maxAttempts: 3
        waitDuration: 1000
        retryExceptions:
          - resilience4j.ysng.real_situation_retrospect.skill_practice.exception.RetryException
        ignoreExceptions:
          - resilience4j.ysng.real_situation_retrospect.skill_practice.exception.IgnoreException

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowType: COUNT_BASED
      # 최소 7번까지는 무조건 CLOSE 로 가정하고 호출한다.
      minimumNumberOfCalls: 7
      # (minimumNumberOfCalls 이후로는) 10개의 요청을 기준으로 판단한다.
      slidingWindowSize: 10

      # OPEN 상태에서 HALF_OPEN 으로 가려면 얼마나 기다릴 것인가?
      waitDurationInOpenState: 10s
      # slidingWindowSize 중 몇 %가 recordException 이면 OPEN 으로 만들 것인가?
      failureRateThreshold: 40

      # 몇 ms 동안 요청이 처리되지 않으면 실패로 간주할 것인가?
      slowCallDurationThreshold: 3000
      # slidingWindowSize 중 몇 %가 slowCall 이면 OPEN 으로 만들 것인가?
      slowCallRateThreshold: 60

      # HALF_OPEN 상태에서 5번까지는 CLOSE 로 가기위해 호출한다.
      permittedNumberOfCallsInHalfOpenState: 5
      # OPEN 상태에서 자동으로 HALF_OPEN 으로 갈 것인가?
      automaticTransitionFromOpenToHalfOpenEnabled: true

      # actuator 를 위한 이벤트 버퍼 사이즈
      eventConsumerBufferSize: 10

      recordExceptions:
        - resilience4j.ysng.real_situation_retrospect.skill_practice.exception.RecordException
      ignoreExceptions:
        - resilience4j.ysng.real_situation_retrospect.skill_practice.exception.IgnoreException

  instances:
    simpleCircuitBreakerConfig:
      baseConfig: default

management:
  endpoints.web.exposure.include: '*'

  endpoint.health.show-details: always

  health:
    diskspace.enabled: false
    circuitbreakers.enabled: true

  metrics:
    tags.application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
        resilience4j.circuitbreaker.calls: true
